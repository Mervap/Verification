{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "Reports redundant `import` statements.\n\nDefault and unused imports can be safely removed.\n\n**Example:**\n\n\n      import kotlin.*\n      import kotlin.collections.*\n      import kotlin.comparisons.*\n      import kotlin.io.*\n      import kotlin.ranges.*\n      import kotlin.sequences.*\n      import kotlin.text.*\n\n      // jvm specific\n      import java.lang.*\n      import kotlin.jvm.*\n\n      // js specific\n      import kotlin.js.*\n\n      import java.io.* // this import is unused and could be removed\n      import java.util.*\n\n      fun foo(list: ArrayList<String>) {\n          list.add(\"\")\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 3,
      "offset": 1,
      "length": 55,
      "code": {
        "startLine": 1,
        "length": 55,
        "offset": 104,
        "surroundingCode": "import com.github.h0tk3y.betterParse.combinators.*\nimport com.github.h0tk3y.betterParse.grammar.Grammar\nimport com.github.h0tk3y.betterParse.grammar.parseToEnd\nimport com.github.h0tk3y.betterParse.grammar.parser\nimport com.github.h0tk3y.betterParse.lexer.literalToken"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": "ceea43b92513fc3be7f2f8a403b4a14cc421f1fd72f6d1cee0db61efa9ebd23a"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'exOp' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 102,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 100,
        "length": 4,
        "offset": 81,
        "surroundingCode": "\n    val axOp by -ax * parser(this::ctlExpr) map { f -> Not(EX(Not(f)))}\n    val exOp by -ex * parser(this::ctlExpr) map { f -> EX(f)}\n    val afOp by -af * parser(this::ctlExpr) map { f -> AU(TRUE, f)}\n    val efOp by -ef * parser(this::ctlExpr) map { f -> EU(TRUE, f)}"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "b229e26cd16c34fb58503de2a4c574726674686de5987b8401311cb175dcfc4e"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'af' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 88,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 86,
        "length": 2,
        "offset": 76,
        "surroundingCode": "    val ax by regexToken(\"AX\\\\b\")\n    val ex by regexToken(\"EX\\\\b\")\n    val af by regexToken(\"AF\\\\b\")\n    val ef by regexToken(\"EF\\\\b\")\n    val ag by regexToken(\"AG\\\\b\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "c93145371e9a4d89faefbb0052f0daa25466f37a785c2872dcfea68d936de2d2"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'tr' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 74,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 72,
        "length": 2,
        "offset": 52,
        "surroundingCode": "\nobject CTLGrammar: Grammar<CTLFormula>() {\n    val tr by literalToken(\"1\")\n    val fal by literalToken(\"0\")\n    val lpar by literalToken(\"(\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "d79d3f58fc20d62139eb4ef9a50ee0ecf6efcc612d87e9d60b6d66542500c03a"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'lspar' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 78,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 76,
        "length": 5,
        "offset": 76,
        "surroundingCode": "    val lpar by literalToken(\"(\")\n    val rpar by literalToken(\")\")\n    val lspar by literalToken(\"[\")\n    val rspar by literalToken(\"]\")\n    val not by literalToken(\"!\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "da79331589463d2d7edd7bdf69cc11fab50d0db27656ab3db050929c43b47036"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'bracedExpression' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 98,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 96,
        "length": 16,
        "offset": 74,
        "surroundingCode": "\n    val negation by -not * parser(this::ctlExpr) map { Not(it) }\n    val bracedExpression by -lpar * parser(this::implChain) * -rpar\n\n"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "604dbbd2f091865678b5f97359f7b526d9ad998976e9a7d8a1719b2371ca53b5"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'negation' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 97,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 95,
        "length": 8,
        "offset": 57,
        "surroundingCode": "    val ws by regexToken(\"\\\\s+\", ignore = true)\n\n    val negation by -not * parser(this::ctlExpr) map { Not(it) }\n    val bracedExpression by -lpar * parser(this::implChain) * -rpar\n"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "95db123e97b25f5df412a3fc724fbd0c191550da76996395e6becf08192684d3"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'rpar' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 77,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 75,
        "length": 4,
        "offset": 75,
        "surroundingCode": "    val fal by literalToken(\"0\")\n    val lpar by literalToken(\"(\")\n    val rpar by literalToken(\")\")\n    val lspar by literalToken(\"[\")\n    val rspar by literalToken(\"]\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "a594f303c091403882fd65d07452e52a01433be7ca9a5f796027a7f5ed0c7995"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'euOp' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 108,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 106,
        "length": 4,
        "offset": 206,
        "surroundingCode": "    val egOp by -eg * parser(this::ctlExpr) map { f -> Not(AU(TRUE, Not(f)))}\n    val auOp by -au * -lspar * parser(this::ctlExpr) * -comma * parser(this::ctlExpr) * -rspar map {(a, b) -> AU(a, b)}\n    val euOp by -eu * -lspar * parser(this::ctlExpr) * -comma * parser(this::ctlExpr) * -rspar map { (a, b) -> EU(a, b)}\n\n"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "2c20354a6b1ae211a350c1aeb380d4b05415757ba7659af3447ffde2fca9d13e"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'ctlExpr' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 112,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 110,
        "length": 7,
        "offset": 10,
        "surroundingCode": "\n\n    val ctlExpr: Parser<CTLFormula> by\n            (tr asJust TRUE) or\n            (fal asJust Not(TRUE)) or"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "17f52cc28a10fcf8dfeca5032498215c86f5da3a714edcb1eba8c74290347632"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'ef' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 89,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 87,
        "length": 2,
        "offset": 76,
        "surroundingCode": "    val ex by regexToken(\"EX\\\\b\")\n    val af by regexToken(\"AF\\\\b\")\n    val ef by regexToken(\"EF\\\\b\")\n    val ag by regexToken(\"AG\\\\b\")\n    val eg by regexToken(\"EG\\\\b\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "39f3fd1380b4e2d2ed5b67cecd22e9a12072fe60e4de90bb31e978bfcea800bf"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'eq' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 84,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 82,
        "length": 2,
        "offset": 76,
        "surroundingCode": "    val or by literalToken(\"||\")\n    val impl by literalToken(\"->\")\n    val eq by literalToken(\"==\")\n    val comma by literalToken(\",\")\n    val ax by regexToken(\"AX\\\\b\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "3830d0253550045d5626edefdc1cd3193cb4256a77a57da3732d56320bad37a4"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'efOp' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 104,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 102,
        "length": 4,
        "offset": 138,
        "surroundingCode": "    val exOp by -ex * parser(this::ctlExpr) map { f -> EX(f)}\n    val afOp by -af * parser(this::ctlExpr) map { f -> AU(TRUE, f)}\n    val efOp by -ef * parser(this::ctlExpr) map { f -> EU(TRUE, f)}\n    val agOp by -ag * parser(this::ctlExpr) map { f -> Not(EU(TRUE, Not(f)))}\n    val egOp by -eg * parser(this::ctlExpr) map { f -> Not(AU(TRUE, Not(f)))}"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "e6855b3c6e7a4c89101c30845f45ae0b455862299c201851f9594d03c37d397f"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'ax' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 86,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 84,
        "length": 2,
        "offset": 76,
        "surroundingCode": "    val eq by literalToken(\"==\")\n    val comma by literalToken(\",\")\n    val ax by regexToken(\"AX\\\\b\")\n    val ex by regexToken(\"EX\\\\b\")\n    val af by regexToken(\"AF\\\\b\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "e4d66f7aad6e2b7884ed6be13919f6e5de57e6fee0faf1385f53ea6506f60104"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'axOp' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 101,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 99,
        "length": 4,
        "offset": 10,
        "surroundingCode": "\n\n    val axOp by -ax * parser(this::ctlExpr) map { f -> Not(EX(Not(f)))}\n    val exOp by -ex * parser(this::ctlExpr) map { f -> EX(f)}\n    val afOp by -af * parser(this::ctlExpr) map { f -> AU(TRUE, f)}"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "6794e166afbc6090ec417b3fdfbfe7eceb9f832ba1e40e6237ecbadd4ad44a40"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'impl' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 83,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 81,
        "length": 4,
        "offset": 75,
        "surroundingCode": "    val and by literalToken(\"&&\")\n    val or by literalToken(\"||\")\n    val impl by literalToken(\"->\")\n    val eq by literalToken(\"==\")\n    val comma by literalToken(\",\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "327b6832e69410664eeaf4d4748ee3e66c269d0a5e47827b535b2d4ee7991dfc"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'and' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 81,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 79,
        "length": 3,
        "offset": 76,
        "surroundingCode": "    val rspar by literalToken(\"]\")\n    val not by literalToken(\"!\")\n    val and by literalToken(\"&&\")\n    val or by literalToken(\"||\")\n    val impl by literalToken(\"->\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "f9d6c7cca0e36102f9960248764becc54f7c0c632be88db33e7e132e74678a23"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'lpar' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 76,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 74,
        "length": 4,
        "offset": 73,
        "surroundingCode": "    val tr by literalToken(\"1\")\n    val fal by literalToken(\"0\")\n    val lpar by literalToken(\"(\")\n    val rpar by literalToken(\")\")\n    val lspar by literalToken(\"[\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "ea73bdf6fae3422e7ff23b0f78013ff739c4f7bf9e97f4f3af5b998e042b79c5"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'ag' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 90,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 88,
        "length": 2,
        "offset": 76,
        "surroundingCode": "    val af by regexToken(\"AF\\\\b\")\n    val ef by regexToken(\"EF\\\\b\")\n    val ag by regexToken(\"AG\\\\b\")\n    val eg by regexToken(\"EG\\\\b\")\n    val au by regexToken(\"AU\\\\b\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "ba515f9b421a66277b52e0a7f61fcbbd89cf1689ae4650cdf2de7b73d4d19f7d"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'or' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 82,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 80,
        "length": 2,
        "offset": 75,
        "surroundingCode": "    val not by literalToken(\"!\")\n    val and by literalToken(\"&&\")\n    val or by literalToken(\"||\")\n    val impl by literalToken(\"->\")\n    val eq by literalToken(\"==\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "750f0b36a08eba39c1026eb6baf9fe395eeecffbfce722abe14279d6fa1f19a2"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'eqChain' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 127,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 125,
        "length": 7,
        "offset": 26,
        "surroundingCode": "            euOp\n\n    val eqChain by leftAssociative(ctlExpr, eq) { a, _, b -> Or(Not(Or(a, b)), Not(Or(Not(a), Not(b)))) }\n    val andChain by leftAssociative(eqChain, and) { a, _, b -> Not(Or(Not(a), Not(b))) }\n    val orChain by leftAssociative(andChain, or) { a, _, b -> Or(a, b) }"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "29ff8ceea84938f7b68bbf59382efa708d9b5758ff57cd9de8b11d1252fbfa20"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'agOp' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 105,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 103,
        "length": 4,
        "offset": 144,
        "surroundingCode": "    val afOp by -af * parser(this::ctlExpr) map { f -> AU(TRUE, f)}\n    val efOp by -ef * parser(this::ctlExpr) map { f -> EU(TRUE, f)}\n    val agOp by -ag * parser(this::ctlExpr) map { f -> Not(EU(TRUE, Not(f)))}\n    val egOp by -eg * parser(this::ctlExpr) map { f -> Not(AU(TRUE, Not(f)))}\n    val auOp by -au * -lspar * parser(this::ctlExpr) * -comma * parser(this::ctlExpr) * -rspar map {(a, b) -> AU(a, b)}"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "679acaecd85665c4fc6091fc343e6e278f7603e4dfb775d2c569a5f62a3c5259"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'orChain' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 129,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 127,
        "length": 7,
        "offset": 203,
        "surroundingCode": "    val eqChain by leftAssociative(ctlExpr, eq) { a, _, b -> Or(Not(Or(a, b)), Not(Or(Not(a), Not(b)))) }\n    val andChain by leftAssociative(eqChain, and) { a, _, b -> Not(Or(Not(a), Not(b))) }\n    val orChain by leftAssociative(andChain, or) { a, _, b -> Or(a, b) }\n    val implChain by rightAssociative(orChain, impl) { a, _, b -> Or(Not(a), b) }\n"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "ac8b30819ce86b934a8d87f0de25592ffe90ae1076e659534ef54062d485f3a8"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'andChain' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 128,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 126,
        "length": 8,
        "offset": 115,
        "surroundingCode": "\n    val eqChain by leftAssociative(ctlExpr, eq) { a, _, b -> Or(Not(Or(a, b)), Not(Or(Not(a), Not(b)))) }\n    val andChain by leftAssociative(eqChain, and) { a, _, b -> Not(Or(Not(a), Not(b))) }\n    val orChain by leftAssociative(andChain, or) { a, _, b -> Or(a, b) }\n    val implChain by rightAssociative(orChain, impl) { a, _, b -> Or(Not(a), b) }"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "05ffcee7b88e5b986b190f1f9686320fa9c49bcaebecfcf90e3898bd1587586d"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'eu' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 93,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 91,
        "length": 2,
        "offset": 76,
        "surroundingCode": "    val eg by regexToken(\"EG\\\\b\")\n    val au by regexToken(\"AU\\\\b\")\n    val eu by regexToken(\"EU\\\\b\")\n    val name by regexToken(\"\\\\w+\")\n    val ws by regexToken(\"\\\\s+\", ignore = true)"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "c3973b8e9b96a507f8acf153b5fdd30ef0fb38cdcc588c0f0e33ae4abd956717"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'implChain' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 130,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 128,
        "length": 9,
        "offset": 170,
        "surroundingCode": "    val andChain by leftAssociative(eqChain, and) { a, _, b -> Not(Or(Not(a), Not(b))) }\n    val orChain by leftAssociative(andChain, or) { a, _, b -> Or(a, b) }\n    val implChain by rightAssociative(orChain, impl) { a, _, b -> Or(Not(a), b) }\n\n"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "04fa25da26c48aa80943edeb01c0fb22eb865afa54bcbb1e049266c8e4f2cb2e"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'au' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 92,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 90,
        "length": 2,
        "offset": 76,
        "surroundingCode": "    val ag by regexToken(\"AG\\\\b\")\n    val eg by regexToken(\"EG\\\\b\")\n    val au by regexToken(\"AU\\\\b\")\n    val eu by regexToken(\"EU\\\\b\")\n    val name by regexToken(\"\\\\w+\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "58ac2823dde1c6109a42f558916ccbc03f2efc999cbcd1551378321f51bae530"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'ex' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 87,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 85,
        "length": 2,
        "offset": 77,
        "surroundingCode": "    val comma by literalToken(\",\")\n    val ax by regexToken(\"AX\\\\b\")\n    val ex by regexToken(\"EX\\\\b\")\n    val af by regexToken(\"AF\\\\b\")\n    val ef by regexToken(\"EF\\\\b\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "ed40a71060850ca58bd2bc53fa12db3e22ace90b221c608758a5f8e4c428b710"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'comma' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 85,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 83,
        "length": 5,
        "offset": 76,
        "surroundingCode": "    val impl by literalToken(\"->\")\n    val eq by literalToken(\"==\")\n    val comma by literalToken(\",\")\n    val ax by regexToken(\"AX\\\\b\")\n    val ex by regexToken(\"EX\\\\b\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "8a2f24cc2420cddea3ab8bb6621b38b22375e629704bf3d421cf5ecd747336dc"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'name' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 94,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 92,
        "length": 4,
        "offset": 76,
        "surroundingCode": "    val au by regexToken(\"AU\\\\b\")\n    val eu by regexToken(\"EU\\\\b\")\n    val name by regexToken(\"\\\\w+\")\n    val ws by regexToken(\"\\\\s+\", ignore = true)\n"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "b1247211ce59a30edb71e03ac9253ec10c0f2f79361cff9cbdc9f376f5860433"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'eg' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 91,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 89,
        "length": 2,
        "offset": 76,
        "surroundingCode": "    val ef by regexToken(\"EF\\\\b\")\n    val ag by regexToken(\"AG\\\\b\")\n    val eg by regexToken(\"EG\\\\b\")\n    val au by regexToken(\"AU\\\\b\")\n    val eu by regexToken(\"EU\\\\b\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "22310bf265203dc7b46cc73eb0dbfc446d0de2ef4ce2669542d3dbc80bdc2eeb"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'egOp' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 106,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 104,
        "length": 4,
        "offset": 154,
        "surroundingCode": "    val efOp by -ef * parser(this::ctlExpr) map { f -> EU(TRUE, f)}\n    val agOp by -ag * parser(this::ctlExpr) map { f -> Not(EU(TRUE, Not(f)))}\n    val egOp by -eg * parser(this::ctlExpr) map { f -> Not(AU(TRUE, Not(f)))}\n    val auOp by -au * -lspar * parser(this::ctlExpr) * -comma * parser(this::ctlExpr) * -rspar map {(a, b) -> AU(a, b)}\n    val euOp by -eu * -lspar * parser(this::ctlExpr) * -comma * parser(this::ctlExpr) * -rspar map { (a, b) -> EU(a, b)}"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "cb90409b7376f3952fda7f92c9aa9e7266ed18816d2f1eeece4041605cb1caca"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'rspar' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 79,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 77,
        "length": 5,
        "offset": 77,
        "surroundingCode": "    val rpar by literalToken(\")\")\n    val lspar by literalToken(\"[\")\n    val rspar by literalToken(\"]\")\n    val not by literalToken(\"!\")\n    val and by literalToken(\"&&\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "ea2fa5d8b861dc86d557f5e6d55fb77b87c71e3094dd5913b5019880281eeb4d"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'auOp' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 107,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 105,
        "length": 4,
        "offset": 164,
        "surroundingCode": "    val agOp by -ag * parser(this::ctlExpr) map { f -> Not(EU(TRUE, Not(f)))}\n    val egOp by -eg * parser(this::ctlExpr) map { f -> Not(AU(TRUE, Not(f)))}\n    val auOp by -au * -lspar * parser(this::ctlExpr) * -comma * parser(this::ctlExpr) * -rspar map {(a, b) -> AU(a, b)}\n    val euOp by -eu * -lspar * parser(this::ctlExpr) * -comma * parser(this::ctlExpr) * -rspar map { (a, b) -> EU(a, b)}\n"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "3b2e02e6ed9d63d24c9a96b381e9fa0ba51da2419ff706d70706bbf5abd7b8f3"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'fal' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 75,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 73,
        "length": 3,
        "offset": 83,
        "surroundingCode": "object CTLGrammar: Grammar<CTLFormula>() {\n    val tr by literalToken(\"1\")\n    val fal by literalToken(\"0\")\n    val lpar by literalToken(\"(\")\n    val rpar by literalToken(\")\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "451608739373f7aff49f683c82cbdacb4d4106ff91637e1c6f8b2c54e2d6a2b3"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'afOp' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 103,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 101,
        "length": 4,
        "offset": 142,
        "surroundingCode": "    val axOp by -ax * parser(this::ctlExpr) map { f -> Not(EX(Not(f)))}\n    val exOp by -ex * parser(this::ctlExpr) map { f -> EX(f)}\n    val afOp by -af * parser(this::ctlExpr) map { f -> AU(TRUE, f)}\n    val efOp by -ef * parser(this::ctlExpr) map { f -> EU(TRUE, f)}\n    val agOp by -ag * parser(this::ctlExpr) map { f -> Not(EU(TRUE, Not(f)))}"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "d864068ceb4e1879094daf3539014103863eb5c8ec5b51e288d7d559fdc1d974"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Class \"Guard\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/Serialization.kt",
      "language": "kotlin",
      "line": 77,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 75,
        "length": 5,
        "offset": 57,
        "surroundingCode": "@Serializable\n@XmlSerialName(\"guard\", \"\", \"\")\ndata class Guard(@XmlValue(true) val guard: String = \"\") : WidgetAttribute\n\n@Serializable"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "722de449231e5beaca52ef1e0d76b315bb93bba8e0875793059346ddfadc99ea"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Class \"Incoming\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/Serialization.kt",
      "language": "kotlin",
      "line": 81,
      "offset": 12,
      "length": 8,
      "code": {
        "startLine": 79,
        "length": 8,
        "offset": 60,
        "surroundingCode": "@Serializable\n@XmlSerialName(\"incoming\", \"\", \"\")\ndata class Incoming(val id: String) : WidgetAttribute\n\n@Serializable"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "d3f3a6d6f662242ea6fb060ee74034a92d7d84050650baf683c56357432f8dac"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Class \"Outgoing\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/Serialization.kt",
      "language": "kotlin",
      "line": 85,
      "offset": 12,
      "length": 8,
      "code": {
        "startLine": 83,
        "length": 8,
        "offset": 60,
        "surroundingCode": "@Serializable\n@XmlSerialName(\"outgoing\", \"\", \"\")\ndata class Outgoing(val id: String) : WidgetAttribute\n"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "7e593ab9a090311183067eb28d0116fce42952ccb772a91091c63d6aadf6329e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Class \"Action\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/Serialization.kt",
      "language": "kotlin",
      "line": 69,
      "offset": 12,
      "length": 6,
      "code": {
        "startLine": 67,
        "length": 6,
        "offset": 58,
        "surroundingCode": "@Serializable\n@XmlSerialName(\"action\", \"\", \"\")\ndata class Action(val name: String, val comment: String, val synchro: String) : WidgetAttribute\n\n@Serializable"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b42e7e58f3d698936bdc31c28b35505dd1384f57302085c18778e089393b6f78"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Class \"Code\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/Serialization.kt",
      "language": "kotlin",
      "line": 73,
      "offset": 12,
      "length": 4,
      "code": {
        "startLine": 71,
        "length": 4,
        "offset": 56,
        "surroundingCode": "@Serializable\n@XmlSerialName(\"code\", \"\", \"\")\ndata class Code(@XmlValue(true) val code: String = \"\") : WidgetAttribute\n\n@Serializable"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "8791f1a2c96c63751ec42d824e302ab0fcc9db9e70b69770a8e8afe8338bb7ee"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"ws\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 95,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 93,
        "length": 2,
        "offset": 77,
        "surroundingCode": "    val eu by regexToken(\"EU\\\\b\")\n    val name by regexToken(\"\\\\w+\")\n    val ws by regexToken(\"\\\\s+\", ignore = true)\n\n    val negation by -not * parser(this::ctlExpr) map { Not(it) }"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1ed3abaf5f9a8cc8e561449ee1055602c296d8b42523640145013c680e38c200"
},{
  "tool": "Code Inspection",
  "category": "Java interop issues",
  "type": "Package name does not match containing directory",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Package directive does not match the file location",
  "detailsInfo": "Reports `package` directives that do not match the location of the file.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 1,
      "length": 1,
      "code": {
        "startLine": 7,
        "length": 1,
        "offset": 52,
        "surroundingCode": "import com.github.h0tk3y.betterParse.parser.Parser\n\nsealed class CTLFormula {\n    abstract fun optimize():CTLFormula\n"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "PackageDirectoryMismatch"
  },
  "hash": "42ea87c8d128dd7e8bf9fbf762c397c2a5cca10e4e3f9404b7e444400f2f9ec2"
}]}