{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Obvious explicit type",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Explicitly given type is redundant here",
  "detailsInfo": "Reports local variables' explicitly given types which are obvious and thus redundant, like `val f: Foo = Foo()`.\n\n**Example:**\n\n\n      class Point(val x: Int, val y: Int)\n\n      fun foo() {\n          val t: Boolean = true\n          val p: Point = Point(1, 2)\n          val i: Int = 42\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Point(val x: Int, val y: Int)\n\n      fun foo() {\n          val t = true\n          val p = Point(1, 2)\n          val i = 42\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 89,
      "offset": 27,
      "length": 3,
      "code": {
        "startLine": 87,
        "length": 3,
        "offset": 93,
        "surroundingCode": "            } else {\n                var name = DEFAULT_STATE_NAME\n                var type: Int = 0\n                val incoming = mutableSetOf<String>()\n                val outgoing = mutableSetOf<String>()"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "RedundantExplicitType"
  },
  "hash": "05e7c0945784fbc81d223d01d357bab6299acc7bc802019975757a1a31c87e44"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant nullable return type",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "'way' always returns non-null type",
  "detailsInfo": "Reports functions and variables with nullable return type which never return or become `null`.\n\n**Example:**\n\n\n      fun greeting(user: String): String? = \"Hello, $user!\"\n\nAfter the quick-fix is applied:\n\n\n      fun greeting(user: String): String = \"Hello, $user!\"\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/Checker.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 71,
      "length": 1,
      "code": {
        "startLine": 7,
        "length": 1,
        "offset": 130,
        "surroundingCode": "\nclass Checker(val model: Model, val formula: CTLFormula) {\n    fun way(visitor: FormulaVisitor, curr: State): MutableList<String>? {\n        TODO(\"build a way\")\n        return mutableListOf()"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "RedundantNullableReturnType"
  },
  "hash": "880699a83a7188d2ef4c616e7afbc89a3847d5f6876a109a7b92268038615459"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Join declaration and assignment",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Can be joined with assignment",
  "detailsInfo": "Reports property declarations that can be joined with the following assignment.\n\n**Example:**\n\n\n      val x: String\n      x = System.getProperty(\"\")\n\nThe quick fix joins the declaration with the assignment:\n\n\n      val x = System.getProperty(\"\")\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 23,
      "offset": 5,
      "length": 40,
      "code": {
        "startLine": 21,
        "length": 40,
        "offset": 84,
        "surroundingCode": "    val states: Map<String, State>\n    val transitions: Map<String, Transition>\n    val addedTransitions: MutableSet<String>\n\n    init {"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "JoinDeclarationAndAssignment"
  },
  "hash": "4916758695ebe7ec9377130c69a94fe7b168d5683322144d5670c1fce43013af"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Explicit 'get' or 'set' call",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Should be replaced with indexing",
  "detailsInfo": "Reports explicit calls to `get` or `set` functions which can be replaced by an indexing operator `[]`.\n\n\nKotlin allows custom implementations for the predefined set of operators on types.\nTo overload an operator, you can mark the corresponding function with the `operator` modifier:\n\n\n      operator fun get(index: Int) {}\n      operator fun set(index: Int, value: Int) {}\n        \nThe functions above correspond to the indexing operator.\n\n**Example:**\n\n      class Test {\n          operator fun get(i: Int): Int = 0\n      }\n\n      fun test() {\n          Test().get(0) // replaceable 'get()'\n      }\n\nAfter the quick-fix is applied:\n\n      class Test {\n          operator fun get(i: Int): Int = 0\n      }\n\n      fun test() {\n          Test()[0]\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 138,
      "offset": 33,
      "length": 3,
      "code": {
        "startLine": 136,
        "length": 3,
        "offset": 108,
        "surroundingCode": "            val name = lexList[0]\n            val value = lexList[2] == \"1\"\n            res.add(Assign(vars.get(name)!!, value))\n        }\n        return res"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "ReplaceGetOrSet"
  },
  "hash": "07ca32bc58039c107348bfffbefaac67ef70669698bdcfa2e5fc8384208add8d"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'model' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/Checker.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 19,
      "length": 5,
      "code": {
        "startLine": 6,
        "length": 5,
        "offset": 63,
        "surroundingCode": "import itmo.verifier.visitor.FormulaVisitor\n\nclass Checker(val model: Model, val formula: CTLFormula) {\n    fun way(visitor: FormulaVisitor, curr: State): MutableList<String>? {\n        TODO(\"build a way\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "ebaaf44859f3adc9fae22047f3b6c2b2a9704308c8e79965c52a48693bcb962b"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'formula' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/Checker.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 37,
      "length": 7,
      "code": {
        "startLine": 6,
        "length": 7,
        "offset": 81,
        "surroundingCode": "import itmo.verifier.visitor.FormulaVisitor\n\nclass Checker(val model: Model, val formula: CTLFormula) {\n    fun way(visitor: FormulaVisitor, curr: State): MutableList<String>? {\n        TODO(\"build a way\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "5750b56d204bcddd4e551020122abb69214e00ec09026e68bc8059f3e2bd5d49"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'egOp' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 267,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 265,
        "length": 4,
        "offset": 174,
        "surroundingCode": "    val efOp by -ef * parser(this::bracedExpression) map { f -> EU(TRUE, f) }\n    val agOp by -ag * parser(this::bracedExpression) map { f -> Not(EU(TRUE, Not(f))) }\n    val egOp by -eg * parser(this::bracedExpression) map { f -> Not(AU(TRUE, Not(f))) }\n    val auOp by -au * -lspar * parser(this::ctlExpr) * -comma * parser(this::ctlExpr) * -rspar map { (a, b) -> AU(a, b) }\n    val euOp by -eu * -lspar * parser(this::ctlExpr) * -comma * parser(this::ctlExpr) * -rspar map { (a, b) -> EU(a, b) }"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "c93bba1200cdcda0f9f67dc1fdc7945a0d9d3d5cb822c3e8a18fca20193b098e"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'ctlExpr' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 273,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 271,
        "length": 7,
        "offset": 10,
        "surroundingCode": "\n\n    val ctlExpr: Parser<CTLFormula> by\n            (tr asJust TRUE) or\n            (fal asJust Not(TRUE)) or"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "322272a29e77adb362b403e2b2518f8472ee1cce2a75bb24f6a4380a6cdeb850"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'agOp' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 266,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 264,
        "length": 4,
        "offset": 164,
        "surroundingCode": "    val afOp by -af * parser(this::bracedExpression) map { f -> AU(TRUE, f) }\n    val efOp by -ef * parser(this::bracedExpression) map { f -> EU(TRUE, f) }\n    val agOp by -ag * parser(this::bracedExpression) map { f -> Not(EU(TRUE, Not(f))) }\n    val egOp by -eg * parser(this::bracedExpression) map { f -> Not(AU(TRUE, Not(f))) }\n    val auOp by -au * -lspar * parser(this::ctlExpr) * -comma * parser(this::ctlExpr) * -rspar map { (a, b) -> AU(a, b) }"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "fdd53b9b40fd4af7ef7eb29e345c06fe55e2e996c11cd201c58618410c26e3b8"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'exOp' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 263,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 261,
        "length": 4,
        "offset": 91,
        "surroundingCode": "\n    val axOp by -ax * parser(this::bracedExpression) map { f -> Not(EX(Not(f))) }\n    val exOp by -ex * parser(this::bracedExpression) map { f -> EX(f) }\n    val afOp by -af * parser(this::bracedExpression) map { f -> AU(TRUE, f) }\n    val efOp by -ef * parser(this::bracedExpression) map { f -> EU(TRUE, f) }"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "b9af84bd91adca7c7316ae0fdc69056af9ba841b34e6989a3268fb68e62b004e"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'euOp' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 269,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 267,
        "length": 4,
        "offset": 218,
        "surroundingCode": "    val egOp by -eg * parser(this::bracedExpression) map { f -> Not(AU(TRUE, Not(f))) }\n    val auOp by -au * -lspar * parser(this::ctlExpr) * -comma * parser(this::ctlExpr) * -rspar map { (a, b) -> AU(a, b) }\n    val euOp by -eu * -lspar * parser(this::ctlExpr) * -comma * parser(this::ctlExpr) * -rspar map { (a, b) -> EU(a, b) }\n\n"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "415458309a8fd518945bc7698e3272f4514f52e35119987dee6bafad8f611029"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'ef' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 250,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 248,
        "length": 2,
        "offset": 76,
        "surroundingCode": "    val ex by regexToken(\"EX\\\\b\")\n    val af by regexToken(\"AF\\\\b\")\n    val ef by regexToken(\"EF\\\\b\")\n    val ag by regexToken(\"AG\\\\b\")\n    val eg by regexToken(\"EG\\\\b\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "ca223bd350c77b4ce7afecac1bbea70e23cf4f9e8d7d9d522c831a6868edc7f1"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'implChain' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 291,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 289,
        "length": 9,
        "offset": 170,
        "surroundingCode": "    val andChain by leftAssociative(eqChain, and) { a, _, b -> Not(Or(Not(a), Not(b))) }\n    val orChain by leftAssociative(andChain, or) { a, _, b -> Or(a, b) }\n    val implChain by rightAssociative(orChain, impl) { a, _, b -> Or(Not(a), b) }\n\n"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "bcb84bb72682bdb62769568c227e7a3e148a845c213ca92034d87b17a37c0d42"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'auOp' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 268,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 266,
        "length": 4,
        "offset": 184,
        "surroundingCode": "    val agOp by -ag * parser(this::bracedExpression) map { f -> Not(EU(TRUE, Not(f))) }\n    val egOp by -eg * parser(this::bracedExpression) map { f -> Not(AU(TRUE, Not(f))) }\n    val auOp by -au * -lspar * parser(this::ctlExpr) * -comma * parser(this::ctlExpr) * -rspar map { (a, b) -> AU(a, b) }\n    val euOp by -eu * -lspar * parser(this::ctlExpr) * -comma * parser(this::ctlExpr) * -rspar map { (a, b) -> EU(a, b) }\n"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "2e52e1af10a964d75f6c91782ab9d06a081955b42c497d9207c0e3b70d13e60f"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'name' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 255,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 253,
        "length": 4,
        "offset": 76,
        "surroundingCode": "    val au by regexToken(\"AU\\\\b\")\n    val eu by regexToken(\"EU\\\\b\")\n    val name by regexToken(\"\\\\w+\")\n    val ws by regexToken(\"\\\\s+\", ignore = true)\n"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "ca2637594db78781698a12bd29a70d1426073104ea4fab35e9cc69992a2089ea"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'negation' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 258,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 256,
        "length": 8,
        "offset": 57,
        "surroundingCode": "    val ws by regexToken(\"\\\\s+\", ignore = true)\n\n    val negation by -not * parser(this::ctlExpr) map { Not(it) }\n    val bracedExpression by -lpar * parser(this::implChain) * -rpar\n"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "ba5049a0af047ddd3a4b6b4eb0915cec895f16950c2bd73a890e3d763ac40f8b"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'eu' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 254,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 252,
        "length": 2,
        "offset": 76,
        "surroundingCode": "    val eg by regexToken(\"EG\\\\b\")\n    val au by regexToken(\"AU\\\\b\")\n    val eu by regexToken(\"EU\\\\b\")\n    val name by regexToken(\"\\\\w+\")\n    val ws by regexToken(\"\\\\s+\", ignore = true)"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "3436c5324e22d1ca1efa574ccb6b7b70e5305463e9e57f87a14da150ef36bb7b"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'ag' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 251,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 249,
        "length": 2,
        "offset": 76,
        "surroundingCode": "    val af by regexToken(\"AF\\\\b\")\n    val ef by regexToken(\"EF\\\\b\")\n    val ag by regexToken(\"AG\\\\b\")\n    val eg by regexToken(\"EG\\\\b\")\n    val au by regexToken(\"AU\\\\b\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "9590893725ab484648c341651278d38f1b6134f6a1b07fb80cb03cbcdd119e43"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'ax' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 247,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 245,
        "length": 2,
        "offset": 76,
        "surroundingCode": "    val eq by literalToken(\"==\")\n    val comma by literalToken(\",\")\n    val ax by regexToken(\"AX\\\\b\")\n    val ex by regexToken(\"EX\\\\b\")\n    val af by regexToken(\"AF\\\\b\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "8bc1d6625b93e593da9a97ea2890a5b0c9822d24cfc84f59d19d8889036c9081"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'af' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 249,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 247,
        "length": 2,
        "offset": 76,
        "surroundingCode": "    val ax by regexToken(\"AX\\\\b\")\n    val ex by regexToken(\"EX\\\\b\")\n    val af by regexToken(\"AF\\\\b\")\n    val ef by regexToken(\"EF\\\\b\")\n    val ag by regexToken(\"AG\\\\b\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "7b06f830bf87f4e13716e7f7d1a5ff1f02b5e6336c4831501af5b6763dc1724d"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'andChain' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 289,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 287,
        "length": 8,
        "offset": 115,
        "surroundingCode": "\n    val eqChain by leftAssociative(ctlExpr, eq) { a, _, b -> Or(Not(Or(a, b)), Not(Or(Not(a), Not(b)))) }\n    val andChain by leftAssociative(eqChain, and) { a, _, b -> Not(Or(Not(a), Not(b))) }\n    val orChain by leftAssociative(andChain, or) { a, _, b -> Or(a, b) }\n    val implChain by rightAssociative(orChain, impl) { a, _, b -> Or(Not(a), b) }"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "719e71c3819955d6acfb892ad2ceaa561d14f0dc02e1d36265ea86525a0db003"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'efOp' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 265,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 263,
        "length": 4,
        "offset": 158,
        "surroundingCode": "    val exOp by -ex * parser(this::bracedExpression) map { f -> EX(f) }\n    val afOp by -af * parser(this::bracedExpression) map { f -> AU(TRUE, f) }\n    val efOp by -ef * parser(this::bracedExpression) map { f -> EU(TRUE, f) }\n    val agOp by -ag * parser(this::bracedExpression) map { f -> Not(EU(TRUE, Not(f))) }\n    val egOp by -eg * parser(this::bracedExpression) map { f -> Not(AU(TRUE, Not(f))) }"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "f0f6477d52fb54482daf725e855777166d8ca4d8b79bfac4c108f76c592c37ba"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'tr' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 235,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 233,
        "length": 2,
        "offset": 53,
        "surroundingCode": "\nobject CTLGrammar : Grammar<CTLFormula>() {\n    val tr by literalToken(\"1\")\n    val fal by literalToken(\"0\")\n    val lpar by literalToken(\"(\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "3da1bde3aaf0b7b9d8ba81aeefeee2ae27325e577eaa09c754267c4c6d8b9201"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'axOp' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 262,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 260,
        "length": 4,
        "offset": 10,
        "surroundingCode": "\n\n    val axOp by -ax * parser(this::bracedExpression) map { f -> Not(EX(Not(f))) }\n    val exOp by -ex * parser(this::bracedExpression) map { f -> EX(f) }\n    val afOp by -af * parser(this::bracedExpression) map { f -> AU(TRUE, f) }"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "ea79fb7f3d3e50f5918bc618f56fc70bf5d5124fb7f20216bdf08109c60b7d80"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'impl' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 244,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 242,
        "length": 4,
        "offset": 75,
        "surroundingCode": "    val and by literalToken(\"&&\")\n    val or by literalToken(\"||\")\n    val impl by literalToken(\"->\")\n    val eq by literalToken(\"==\")\n    val comma by literalToken(\",\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "360a3b3468880dc25e868bf3d01705c634ea785f07dc65c4c8c6eb37b606e094"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'lspar' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 239,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 237,
        "length": 5,
        "offset": 76,
        "surroundingCode": "    val lpar by literalToken(\"(\")\n    val rpar by literalToken(\")\")\n    val lspar by literalToken(\"[\")\n    val rspar by literalToken(\"]\")\n    val not by literalToken(\"!\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "5d2aa756fbd40b4aac6b2a0888f0e40eda1ba92ef6a66be494abfd41e84528a2"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'orChain' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 290,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 288,
        "length": 7,
        "offset": 203,
        "surroundingCode": "    val eqChain by leftAssociative(ctlExpr, eq) { a, _, b -> Or(Not(Or(a, b)), Not(Or(Not(a), Not(b)))) }\n    val andChain by leftAssociative(eqChain, and) { a, _, b -> Not(Or(Not(a), Not(b))) }\n    val orChain by leftAssociative(andChain, or) { a, _, b -> Or(a, b) }\n    val implChain by rightAssociative(orChain, impl) { a, _, b -> Or(Not(a), b) }\n"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "7db0e9c0ea84eef36f61bc7f5d96989cfaefb07eec676965518022e59e3983e2"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'eg' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 252,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 250,
        "length": 2,
        "offset": 76,
        "surroundingCode": "    val ef by regexToken(\"EF\\\\b\")\n    val ag by regexToken(\"AG\\\\b\")\n    val eg by regexToken(\"EG\\\\b\")\n    val au by regexToken(\"AU\\\\b\")\n    val eu by regexToken(\"EU\\\\b\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "e8a2565aa9b3691cb682c2ae4b5faaba84a9f619fa4dc4ce4f54f885838adb5c"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'lpar' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 237,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 235,
        "length": 4,
        "offset": 73,
        "surroundingCode": "    val tr by literalToken(\"1\")\n    val fal by literalToken(\"0\")\n    val lpar by literalToken(\"(\")\n    val rpar by literalToken(\")\")\n    val lspar by literalToken(\"[\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "a8c2b0bd869727d8bae55cad096ca16b6c8313526e757d843be7991fe6da998c"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'eqChain' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 288,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 286,
        "length": 7,
        "offset": 26,
        "surroundingCode": "            euOp\n\n    val eqChain by leftAssociative(ctlExpr, eq) { a, _, b -> Or(Not(Or(a, b)), Not(Or(Not(a), Not(b)))) }\n    val andChain by leftAssociative(eqChain, and) { a, _, b -> Not(Or(Not(a), Not(b))) }\n    val orChain by leftAssociative(andChain, or) { a, _, b -> Or(a, b) }"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "1cdd2fb7a8f3f359e8f694da6b136fa4dbd49f8a4b18383c696a4d45ab16598b"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'ex' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 248,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 246,
        "length": 2,
        "offset": 77,
        "surroundingCode": "    val comma by literalToken(\",\")\n    val ax by regexToken(\"AX\\\\b\")\n    val ex by regexToken(\"EX\\\\b\")\n    val af by regexToken(\"AF\\\\b\")\n    val ef by regexToken(\"EF\\\\b\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "6cba414a3b9aec770dfc232dff882aaed12d661f692f87331a346a01ab65c836"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'or' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 243,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 241,
        "length": 2,
        "offset": 75,
        "surroundingCode": "    val not by literalToken(\"!\")\n    val and by literalToken(\"&&\")\n    val or by literalToken(\"||\")\n    val impl by literalToken(\"->\")\n    val eq by literalToken(\"==\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "0c104b6d49400f5a9d527c4b2dfc5d377ceb3d5c3fa47a87d0443609dd87b657"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'and' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 242,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 240,
        "length": 3,
        "offset": 76,
        "surroundingCode": "    val rspar by literalToken(\"]\")\n    val not by literalToken(\"!\")\n    val and by literalToken(\"&&\")\n    val or by literalToken(\"||\")\n    val impl by literalToken(\"->\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "ae201aa9c4b853ac77ad43cddf89dd620cb1a9f0343b4495f19e1db64c2b8ab2"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'rpar' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 238,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 236,
        "length": 4,
        "offset": 75,
        "surroundingCode": "    val fal by literalToken(\"0\")\n    val lpar by literalToken(\"(\")\n    val rpar by literalToken(\")\")\n    val lspar by literalToken(\"[\")\n    val rspar by literalToken(\"]\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "219a43106ed3c6c6a4b52158a123d48295881a2689bc966fe88d0cbefc9c7516"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'rspar' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 240,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 238,
        "length": 5,
        "offset": 77,
        "surroundingCode": "    val rpar by literalToken(\")\")\n    val lspar by literalToken(\"[\")\n    val rspar by literalToken(\"]\")\n    val not by literalToken(\"!\")\n    val and by literalToken(\"&&\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "5f10f9cf57e77f6815baa3cfd8445c277b368474e09336c26a2b993d0aad9554"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'bracedExpression' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 259,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 257,
        "length": 16,
        "offset": 74,
        "surroundingCode": "\n    val negation by -not * parser(this::ctlExpr) map { Not(it) }\n    val bracedExpression by -lpar * parser(this::implChain) * -rpar\n\n"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "3005f192e502ab2d7ae16947753cc151844c6e9b0a48f8c2a4602272399bff00"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'comma' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 246,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 244,
        "length": 5,
        "offset": 76,
        "surroundingCode": "    val impl by literalToken(\"->\")\n    val eq by literalToken(\"==\")\n    val comma by literalToken(\",\")\n    val ax by regexToken(\"AX\\\\b\")\n    val ex by regexToken(\"EX\\\\b\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "0dfe82495500fe143a4f14167791cbcfc4ccf897de1deb9096882b020316ec5b"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'au' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 253,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 251,
        "length": 2,
        "offset": 76,
        "surroundingCode": "    val ag by regexToken(\"AG\\\\b\")\n    val eg by regexToken(\"EG\\\\b\")\n    val au by regexToken(\"AU\\\\b\")\n    val eu by regexToken(\"EU\\\\b\")\n    val name by regexToken(\"\\\\w+\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "2ff4975e6beb38c0f342021c3badb7c48a21067565f32b099b2992cd0e8dbe62"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'eq' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 245,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 243,
        "length": 2,
        "offset": 76,
        "surroundingCode": "    val or by literalToken(\"||\")\n    val impl by literalToken(\"->\")\n    val eq by literalToken(\"==\")\n    val comma by literalToken(\",\")\n    val ax by regexToken(\"AX\\\\b\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "753e114854b3abaad2f0d22a0d5ed274ac8e067d8bf6e22e3cae24a7c11417e0"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'afOp' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 264,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 262,
        "length": 4,
        "offset": 162,
        "surroundingCode": "    val axOp by -ax * parser(this::bracedExpression) map { f -> Not(EX(Not(f))) }\n    val exOp by -ex * parser(this::bracedExpression) map { f -> EX(f) }\n    val afOp by -af * parser(this::bracedExpression) map { f -> AU(TRUE, f) }\n    val efOp by -ef * parser(this::bracedExpression) map { f -> EU(TRUE, f) }\n    val agOp by -ag * parser(this::bracedExpression) map { f -> Not(EU(TRUE, Not(f))) }"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "7332eb8711c6bf62285ae79bfcf498952d842fa28d4a9ad35690c6c5c320567b"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'fal' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 236,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 234,
        "length": 3,
        "offset": 84,
        "surroundingCode": "object CTLGrammar : Grammar<CTLFormula>() {\n    val tr by literalToken(\"1\")\n    val fal by literalToken(\"0\")\n    val lpar by literalToken(\"(\")\n    val rpar by literalToken(\")\")"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "61c0caf81b402f92a8f6bc2a11da5698b356ba5f2262a01647a471e191ddd87e"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Function 'parseDeclaration' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 143,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 141,
        "length": 16,
        "offset": 15,
        "surroundingCode": "    }\n\n    fun parseDeclaration(s: String): Variable {\n        val decl = s.replace(\";\", \"\")\n        val lexList = decl.split(\"(\\\\s)+\".toRegex())"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "909f09afaa74b47448579f0f6d41946bd90c607ddc57115dd29755cb28323144"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'variables' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 17,
        "length": 9,
        "offset": 70,
        "surroundingCode": "    val autoReject: Boolean\n    val events: List<EventKripke>\n    val variables: Map<String, Variable>\n    val variableOrder: MutableMap<String, Int>\n    val states: Map<String, State>"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "6ab77e0a38f8546045b4b091769b13702685dec89c1978cd4abd3119e46b8af0"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'name' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 14,
        "length": 4,
        "offset": 75,
        "surroundingCode": "class Model(diagram: Diagram) {\n    lateinit var startState: State\n    val name: String\n    val autoReject: Boolean\n    val events: List<EventKripke>"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "f22768b4dc37935e88a4cb62a235e5389242799125f6ab3f6ab72e6982fd7636"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'name' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 161,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 159,
        "length": 4,
        "offset": 41,
        "surroundingCode": "class State(\n    val id: String,\n    val name: String,\n    val type: Int,\n    val incomingTransitions: MutableSet<String>,"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "c8246c2750b27c9ae6f21247def95217bc353bd901909e46b705b4af82cedd9c"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'variableOrder' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 18,
        "length": 13,
        "offset": 83,
        "surroundingCode": "    val events: List<EventKripke>\n    val variables: Map<String, Variable>\n    val variableOrder: MutableMap<String, Int>\n    val states: Map<String, State>\n    val transitions: Map<String, Transition>"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "3d88d86b3b87fdddf41adc1c9f71ae27da630ffb299f5a5d245638ea4caf4345"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'autoReject' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 17,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 15,
        "length": 10,
        "offset": 64,
        "surroundingCode": "    lateinit var startState: State\n    val name: String\n    val autoReject: Boolean\n    val events: List<EventKripke>\n    val variables: Map<String, Variable>"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "1f42b7b9e83daa2870c8c1feb7017639428232069f60326f0592aed91b249044"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Property 'events' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 16,
        "length": 6,
        "offset": 57,
        "surroundingCode": "    val name: String\n    val autoReject: Boolean\n    val events: List<EventKripke>\n    val variables: Map<String, Variable>\n    val variableOrder: MutableMap<String, Int>"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "06bd188d6c89430d4f245725f08da746776cebbd9bd6130e8941730081e3419b"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Function 'parseCode' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 129,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 127,
        "length": 9,
        "offset": 10,
        "surroundingCode": "\n\n    fun parseCode(s: String, vars: Map<String, Variable>): List<Assign> {\n        val lines = s.split(\";(\\\\s)+\".toRegex())\n        val res = mutableListOf<Assign>()"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "78cce729aa649c2b13dab45257f4442e78e5b44247f17b1b4b2d78231107b025"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Cascade if can be replaced with when",
  "tags": [
    "kotlin"
  ],
  "severity": "Moderate",
  "comment": "Cascade 'if' should be replaced with 'when'",
  "detailsInfo": "Reports `if` statements with three or more branches that can be replaced with the `when` expression.\n\n**Example:**\n\n\n      fun checkIdentifier(id: String) {\n          fun Char.isIdentifierStart() = this in 'A'..'z'\n          fun Char.isIdentifierPart() = isIdentifierStart() || this in '0'..'9'\n\n          if (id.isEmpty()) {\n              print(\"Identifier is empty\")\n          } else if (!id.first().isIdentifierStart()) {\n              print(\"Identifier should start with a letter\")\n          } else if (!id.subSequence(1, id.length).all(Char::isIdentifierPart)) {\n              print(\"Identifier should contain only letters and numbers\")\n          }\n      }\n\nA quick-fix converts the `if` expression to `when`:\n\n\n      fun checkIdentifier(id: String) {\n          fun Char.isIdentifierStart() = this in 'A'..'z'\n          fun Char.isIdentifierPart() = isIdentifierStart() || this in '0'..'9'\n\n          when {\n              id.isEmpty() -> {\n                  print(\"Identifier is empty\")\n              }\n              !id.first().isIdentifierStart() -> {\n                  print(\"Identifier should start with a letter\")\n              }\n              !id.subSequence(1, id.length).all(Char::isIdentifierPart) -> {\n                  print(\"Identifier should contain only letters and numbers\")\n              }\n          }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 93,
      "offset": 21,
      "length": 2,
      "code": {
        "startLine": 91,
        "length": 2,
        "offset": 127,
        "surroundingCode": "                val outgoing = mutableSetOf<String>()\n                for (a in w.attributes.attributes) {\n                    if (a is Name) {\n                        name = a.name\n                    } else if (a is Type) {"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "CascadeIf"
  },
  "hash": "8e10a083ed72bfcfd3099bd1ebf7bef6374991856bba8716b2aae6554ff5e6ec"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Function \"way\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/Checker.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 7,
        "length": 3,
        "offset": 68,
        "surroundingCode": "\nclass Checker(val model: Model, val formula: CTLFormula) {\n    fun way(visitor: FormulaVisitor, curr: State): MutableList<String>? {\n        TODO(\"build a way\")\n        return mutableListOf()"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "f4ef0164d2a118366d240ae24ac1164fdf400995bf3ef86c12fb8c1fef964044"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"formula\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/visitor/FormulaVisitor.kt",
      "language": "kotlin",
      "line": 7,
      "offset": 26,
      "length": 7,
      "code": {
        "startLine": 5,
        "length": 7,
        "offset": 59,
        "surroundingCode": "import itmo.verifier.model.State\n\nclass FormulaVisitor(val formula: CTLFormula, val kripke: Model) {\n\n    val eval: MutableMap<State, MutableMap<CTLFormula, Boolean>> = mutableMapOf()"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "673da91df241c6266aff38addcb42a2344ffd027967c56336f67a2ddd0e06ff4"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"ws\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/formula/Formula.kt",
      "language": "kotlin",
      "line": 256,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 254,
        "length": 2,
        "offset": 77,
        "surroundingCode": "    val eu by regexToken(\"EU\\\\b\")\n    val name by regexToken(\"\\\\w+\")\n    val ws by regexToken(\"\\\\s+\", ignore = true)\n\n    val negation by -not * parser(this::ctlExpr) map { Not(it) }"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "343359c480b0f22b63d04dc6bd1173a73c52ce2e44cb27ffdd4191804409ee5a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"type\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 162,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 160,
        "length": 4,
        "offset": 50,
        "surroundingCode": "    val id: String,\n    val name: String,\n    val type: Int,\n    val incomingTransitions: MutableSet<String>,\n    val outgoingTransitions: MutableSet<String>,"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "06b51660331899d123a1854b5ee41911b6b16b545cf7a1ff047b806d33a5cabe"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Function \"compute\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 184,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 182,
        "length": 7,
        "offset": 86,
        "surroundingCode": "    private val formula: CTLFormula = CTLGrammar.parseToEnd(text).optimize()\n\n    fun compute(variables: Map<String, Variable>): Boolean {\n        return formula.compute(variables)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "620f260d32434ea3084818e4ec27e6a1f2b6bb801c8f3d15b426d7bb07fcdb4a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"events\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 172,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 170,
        "length": 6,
        "offset": 50,
        "surroundingCode": "    var from: String,\n    var to: String,\n    val events: List<EventKripke>,\n    val code: List<Assign>,\n    val actions: List<ActionKripke>,"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "81c134bf729f241229a02cae1ebe8c8ea71c4c1a35c450f9dbdfbe45bced9677"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"code\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 173,
      "offset": 9,
      "length": 4,
      "code": {
        "startLine": 171,
        "length": 4,
        "offset": 63,
        "surroundingCode": "    var to: String,\n    val events: List<EventKripke>,\n    val code: List<Assign>,\n    val actions: List<ActionKripke>,\n    val guard: List<GuardKripke>"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6cc47e386d964ef4b08f2b986d0c9f897fa378826f58aad33a07f1fd0a26b432"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"actions\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 174,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 172,
        "length": 7,
        "offset": 71,
        "surroundingCode": "    val events: List<EventKripke>,\n    val code: List<Assign>,\n    val actions: List<ActionKripke>,\n    val guard: List<GuardKripke>\n)"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b0271e1847cf3c73c1f0feff0cfe5f2173601341bb9eed54af836ff25b32e590"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"guard\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 175,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 173,
        "length": 5,
        "offset": 73,
        "surroundingCode": "    val code: List<Assign>,\n    val actions: List<ActionKripke>,\n    val guard: List<GuardKripke>\n)\n"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6e143c832f1098aa370ec8008362dc235fc36018750a04d474ec4d652eca9a65"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"synchro\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 190,
      "offset": 42,
      "length": 7,
      "code": {
        "startLine": 188,
        "length": 7,
        "offset": 44,
        "surroundingCode": "}\n\nclass ActionKripke(val name: String, val synchro: Boolean)\n\nclass Variable(val name: String, val type: VariableType, var value: Boolean)"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "dab2a620c4aeb71d69a2730dded55a1fa1ae408a431c1c79e9a4cdd4e6e436b3"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Property \"type\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 192,
      "offset": 38,
      "length": 4,
      "code": {
        "startLine": 190,
        "length": 4,
        "offset": 97,
        "surroundingCode": "class ActionKripke(val name: String, val synchro: Boolean)\n\nclass Variable(val name: String, val type: VariableType, var value: Boolean)\n\ndata class Assign(val t: Variable, val value: Boolean)"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "cb3a31696c146f7374829c3e7e07353dc3c318ea7da79aa86640426745ea05be"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant semicolon",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Redundant semicolon",
  "detailsInfo": "Reports redundant semicolons (`;`) that can be safely removed.\n\n\nKotlin does not require a semicolon at the end of each statement or expression.\nA quick-fix is suggested to remove redundant semicolons.\n\n**Example:**\n\n\n      val myMap = mapOf(\"one\" to 1, \"two\" to 2);\n      myMap.forEach { (key, value) ->  print(\"$key -> $value\")};\n\nAfter the quick-fix is applied:\n\n\n      val myMap = mapOf(\"one\" to 1, \"two\" to 2)\n      myMap.forEach { (key, value) ->  print(\"$key -> $value\")}\n\nThere are two cases though where a semicolon is required:\n\n1. Several statements placed on a single line need to be separated with semicolons:\n\n\n         map.forEach { val (key, value) = it; println(\"$key -> $value\") }\n\n2. `enum` classes that also declare properties or functions, require a semicolon after the list of enum constants:\n\n\n         enum class Mode {\n             SILENT, VERBOSE;\n\n             fun isSilent(): Boolean = this == SILENT\n         }\n               \n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/itmo/verifier/model/Kripke.kt",
      "language": "kotlin",
      "line": 146,
      "offset": 38,
      "length": 1,
      "code": {
        "startLine": 144,
        "length": 1,
        "offset": 128,
        "surroundingCode": "        val decl = s.replace(\";\", \"\")\n        val lexList = decl.split(\"(\\\\s)+\".toRegex())\n        var type = VariableType.PLAIN;\n        var itemIdx = 1\n        if (lexList[0] == VariableType.VOLATILE.name) {"
      }
    }
  ],
  "attributes": {
    "module": "verifier.main",
    "inspectionName": "RedundantSemicolon"
  },
  "hash": "735c713ac9f276384f541aa95b15b2b526bed2e76123bc1f977cf61875762fd3"
}]}